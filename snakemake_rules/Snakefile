configfile: "/home/mei.wu/rna-seq/config/config.yaml"

COMMON_DIR = config["output_dir"]


rule end:
    input:
        COMMON_DIR + "/star_index/",
        expand(COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam.bai", sample=config["read1"]),
        expand(COMMON_DIR + "/{sample}/multiqc/report.html", sample=config["read1"]),

rule fastqc:
    input:
        read1 = lambda wildcards: config["read1"][wildcards.sample],
        read2 = lambda wildcards: config["read2"][wildcards.sample]
    output:
        qc_read1 = COMMON_DIR + "/{sample}/fastqc/{sample}_1_fastqc.zip",
        qc_read2 = COMMON_DIR + "/{sample}/fastqc/{sample}_2_fastqc.zip"
    params:
        tmp_dir = config["tmp_dir"],
        outpath = COMMON_DIR + "/{sample}/fastqc/"
    threads: 15
    shell:
        "fastqc --threads {threads} --noextract --dir {params.tmp_dir} --outdir {params.outpath} {input.read1};"
        "fastqc --threads {threads} --noextract --dir {params.tmp_dir} --outdir {params.outpath} {input.read2};"

rule trim_galore_pe:
    input:
        read1 = lambda wildcards: config["read1"][wildcards.sample],
        read2 = lambda wildcards: config["read2"][wildcards.sample]
    output:
        trimmed_1 = COMMON_DIR + "/{sample}/trim-galore/{sample}_1_val_1.fq.gz",
        trimmed_2 = COMMON_DIR + "/{sample}/trim-galore/{sample}_2_val_2.fq.gz"
    params:
        outpath = COMMON_DIR + "/{sample}/trim-galore/"
    shell:
         "trim_galore --cores 15 --fastqc --gzip --output_dir {params.outpath} --paired {input.read1} {input.read2}"

rule star_index:
    input:
         fa = config["genome"],
         gtf = config["gtf"]
    output:
         directory(COMMON_DIR + "/star_index/")
    threads: 36
    shell:
         'STAR --runThreadN {threads} '
         '--runMode genomeGenerate '
         '--genomeDir {output}'
         '--genomeFastaFiles {input.fa} '
         '--sjdbGTFfile {input.gtf} '
         '--sjdbOverhang 99'

rule star_align:
    input:
        trimmed_1 = COMMON_DIR + "/{sample}/trim-galore/{sample}_1_val_1.fq.gz",
        trimmed_2 = COMMON_DIR + "/{sample}/trim-galore/{sample}_2_val_2.fq.gz",
        ref_dir = COMMON_DIR + "/star_index/"
    output:
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam",
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.toTranscriptome.out.bam"
    params:
        prefix = COMMON_DIR + "/{sample}/star_aln/{sample}."
    log:
        COMMON_DIR + "/{sample}/star_aln/logs/{sample}.log",
    threads: 36
    shell:
        "STAR --genomeDIR {input.ref_dir} "
        "--readFilesin {input.trimmed_1} {input.trimmed_2} "
        "--readFilesCommand zcat "        
        "--twopassMode Basic "
        "--quantMode TranscriptomeSAM " # using RSEM
        "--peOverlapNbasesMin 10 "
        "--outSAMtype BAM SortedByCoordinate "
        "--outFileNamePrefix {params.prefix} "
        "--runThreadN {threads}"


# rule rename_bam: # I will add this rule .. later to comply w/ conventions ^_^

rule mark_dupes:
    input:
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        bam=COMMON_DIR + "/{sample}/picard_markdupe/{sample}.bam",
        metrics=COMMON_DIR + "/{sample}/picard_markdupe/{sample}.metrics.txt"
    log:
        COMMON_DIR + "/{sample}/logs/{sample}.log"
    params:
        "REMOVE_DUPLICATES=true"
    wrapper:
        "0.68.0/bio/picard/markduplicates"

rule samtools_index:
    input:
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam.bai"
    wrapper:
        "0.68.0/bio/samtools/index"

rule rsem:
    input:
        COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.toTranscriptome.out.bam",
    output:
        COMMON_DIR + "/{sample}/rsem/{sample}.transcript.bam",
    params:
        prefix = "COMMON_DIR + /{sample}/rsem/{sample}"
    threads: 36
    shell:
        "rsem-calculate-expression "
        "--star "
        "--num-threads {threads} "
        "--alignments {input} "
        "COMMON_DIR + /star_index/ " # path to the genome index generated by STAR
        "{params.prefix}"

rule summary:
    input:
        qc_read1 = COMMON_DIR + "/{sample}/fastqc/{sample}_1_fastqc.zip",
        qc_read2 = COMMON_DIR + "/{sample}/fastqc/{sample}_2_fastqc.zip",
        trimmed_1 = COMMON_DIR + "/{sample}/trim-galore/{sample}_1_val_1.fq.gz",
        trimmed_2 = COMMON_DIR + "/{sample}/trim-galore/{sample}_2_val_2.fq.gz",
        star_aln=COMMON_DIR + "/{sample}/star_aln/{sample}.Aligned.sortedByCoord.out.bam",
        bam=COMMON_DIR + "/{sample}/picard_markdupe/{sample}.bam",
        metrics=COMMON_DIR + "/{sample}/picard_markdupe/{sample}.metrics.txt",
        rsem=COMMON_DIR + "/{sample}/rsem/{sample}.transcript.bam",
    output:
        COMMON_DIR + "/{sample}/multiqc/report.html"
    params:
        inpath = COMMON_DIR + "/{sample}/"
    threads: 1
    shell:
         "multiqc {params.inpath} --filename {output}"
